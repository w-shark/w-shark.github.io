<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>django select_related和prefetch_related用法</title>
    <url>/2020/05/11/django-select-related%E5%92%8Cprefetch-related%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h3 id="select-related"><a href="#select-related" class="headerlink" title="select_related"></a>select_related</h3><p>语法：<br><code>select_related(*fields)</code> </p>
<p>返回一个QuerySet，它将“遵循”外键关系，并在执行查询时选择外键相关对象数据。实际是使用SQL的 <code>INNER JOIN关</code> 键字。所以select_related可以提高性能，避免数据库重复查询。<br>用一个示例更容易理解，有如下模型。</p>
<p>书和作者是多对一关系，作者和城市也是多对一关系。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span><span class="params">(models. Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    name = models.CharField(max_length=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>City数据：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>北京</td>
</tr>
<tr>
<td>2</td>
<td>上海</td>
</tr>
<tr>
<td>3</td>
<td>广州</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models. Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    name = models.CharField(max_length=<span class="number">120</span>, verbose_name=<span class="string">'名字'</span>)</span><br><span class="line">    hometown = models.ForeignKey(City, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>Persion数据：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>hometown_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>张三</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>张一</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>李四</td>
<td>2</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models. Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    name = models.CharField(max_length=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">    author = models. ForeignKey(Person, on_delete=models. CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>Book数据：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>author_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>c++</td>
<td>2</td>
</tr>
<tr>
<td>2</td>
<td>java</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>python</td>
<td>3</td>
</tr>
</tbody></table>
<p>新建模板，用表格输出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>book<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>author<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>hometown<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% for b in all_book %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; b.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; b.author &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; b.author.hometown &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="未使用select-relate"><a href="#未使用select-relate" class="headerlink" title="未使用select_relate"></a>未使用select_relate</h4><p>编写view函数如下，获取所有书名、作者及城市。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_book</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line">    all_book = Book.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request, template_name=<span class="string">'get_all_book.html'</span>, context=locals())</span><br></pre></td></tr></table></figure>

<p>这里使用debug_toolbar查看详细的SQL执行情况</p>
<p><a href="SQL详细执行过程"><img src="https://s1.ax1x.com/2020/05/12/YtLmGt.png" alt="YtLmGt.png"></a></p>
<p>可以看出book表查询一次, 每个book的auther都需要查询一次，auther有外键关系，对应city也要查询一次. 所以总共有三本书，三本书的auther，city各查询一次，总共6次，而且sql中有重复查询，第2、4条sql是重复的，第3、5条sql是重复的, 可见在数据量很大的时候对数据库会造成很大的压力.</p>
<h4 id="使用select-relate"><a href="#使用select-relate" class="headerlink" title="使用select_relate"></a>使用select_relate</h4><p>select_relate使用了SQL <code>INNER JOIN</code> 进行联表查询，对性能有很大提升, 编写view函数如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_book</span><span class="params">(request)</span>:</span></span><br><span class="line"></span><br><span class="line">    all_book = Book.objects.select_related(<span class="string">'author__hometown'</span>).all()</span><br><span class="line">    <span class="keyword">return</span> render(request, template_name=<span class="string">'get_all_book.html'</span>, context=locals())</span><br></pre></td></tr></table></figure>

<p>页面执行的sql如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`people_book`</span> </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`people_person`</span> <span class="keyword">ON</span> ( <span class="string">`people_book`</span> . <span class="string">`author_id`</span> = <span class="string">`people_person`</span> . <span class="string">`id`</span> ) </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`people_city`</span> <span class="keyword">ON</span> ( <span class="string">`people_person`</span> . <span class="string">`hometown_id`</span> = <span class="string">`people_city`</span> . <span class="string">`id`</span> )</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>author_id</th>
<th>id</th>
<th>name</th>
<th>hometown_id</th>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>c++</td>
<td>2</td>
<td>2</td>
<td>张一</td>
<td>1</td>
<td>1</td>
<td>北京</td>
</tr>
<tr>
<td>2</td>
<td>java</td>
<td>2</td>
<td>2</td>
<td>张一</td>
<td>1</td>
<td>1</td>
<td>北京</td>
</tr>
<tr>
<td>3</td>
<td>python</td>
<td>3</td>
<td>3</td>
<td>李四</td>
<td>2</td>
<td>2</td>
<td>上海</td>
</tr>
</tbody></table>
<p>使用1条sql就可以完美解决。</p>
<p>使用select_relate可用于ForeignKey和OneToOneField，如果一个模型有多个外键，可以使用链式写法： <code>select_related(&#39;foo&#39;, &#39;bar&#39;)</code> 或者 <code>select_related(&#39;foo&#39;).select_related(&#39;bar&#39;)</code> </p>
<h3 id="prefetch-related"><a href="#prefetch-related" class="headerlink" title="prefetch_related"></a>prefetch_related</h3><p>这与select_related具有相似的功能，因为两者均旨在防止由于访问相关对象而引起的数据库查询泛滥，但是策略却大不相同。prefetch_related主要用于many-to-many关系，使用SQL的 <code>IN</code> 关键字。</p>
<p>语法：<br><code>prefetch_related(*lookups)</code> </p>
<p>同样用一个示例说明：</p>
<p>披萨由多种菜品组成，是多对多的关系。</p>
<p>这里为了好说明问题，规定每种菜只来自一个城市，菜品和城市是多对一的关系。</p>
<p>饭店和披萨是多对多关系，每个饭店都有一个拿手菜，饭店和拿手菜是多对一关系。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>城市数据：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>北京</td>
</tr>
<tr>
<td>2</td>
<td>上海</td>
</tr>
<tr>
<td>3</td>
<td>广州</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topping</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    city = models.ForeignKey(City, on_delete=models.CASCADE, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>菜品数据：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>city_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>虾</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>牛肉</td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td>鸡肉</td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td>辣椒</td>
<td>1</td>
</tr>
<tr>
<td>6</td>
<td>番茄</td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td>蔬菜</td>
<td>3</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pizza</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    toppings = models.ManyToManyField(Topping)</span><br><span class="line">    spicy = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s (%s)"</span> % (</span><br><span class="line">            self.name,</span><br><span class="line">            <span class="string">", "</span>.join(topping.name <span class="keyword">for</span> topping <span class="keyword">in</span> self.toppings.all()),</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<p>披萨数据：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>spicy</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>海鲜披萨</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>牛肉披萨</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>鸡肉披萨</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>蔬菜披萨</td>
<td>0</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    pizzas = models.ManyToManyField(Pizza, related_name=<span class="string">'restaurants'</span>)</span><br><span class="line">    best_pizza = models.ForeignKey(Pizza, related_name=<span class="string">'championed_by'</span>, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>

<p>饭店数据:</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>best_pizza_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>必胜客</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>达美</td>
<td>3</td>
</tr>
</tbody></table>
<p>还有一个饭店和披萨的多对多数据:</p>
<table>
<thead>
<tr>
<th>id</th>
<th>restaurant_id</th>
<th>pizza_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>4</td>
</tr>
</tbody></table>
<p>先列出所有披萨和披萨的原材料，写如下模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Pizza<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Topping<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% for pizza in all_pizza %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; pizza.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            &#123;% for topping in pizza.toppings.all %&#125;</span><br><span class="line">            &#123;&#123; topping &#125;&#125;,</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="未使用prefetch-related"><a href="#未使用prefetch-related" class="headerlink" title="未使用prefetch_related"></a>未使用prefetch_related</h4><p>编写view函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_pizza</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_pizza = Pizza.objects.all()</span><br><span class="line">    <span class="keyword">return</span> render(request, template_name=<span class="string">'get_all_pizza.html'</span>, context=locals())</span><br></pre></td></tr></table></figure>

<p>触发的数据库查询如下：</p>
<p><img src="https://s1.ax1x.com/2020/05/12/YN6eAg.png" alt="YN6eAg.png"></p>
<p>查询所有的披萨使用一个sql，中共有4种披萨，每种披萨在独立查询使用的原材料，所以总共5次查询。</p>
<h4 id="使用prefetch-related"><a href="#使用prefetch-related" class="headerlink" title="使用prefetch_related"></a>使用prefetch_related</h4><p>编写view函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_pizza</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_pizza = Pizza.objects.all().prefetch_related(<span class="string">'toppings'</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, template_name=<span class="string">'get_all_pizza.html'</span>, context=locals())</span><br></pre></td></tr></table></figure>

<p>触发的数据库查询如下：</p>
<p><img src="https://s1.ax1x.com/2020/05/12/YNcJMt.png" alt="YNcJMt.png"></p>
<p>只有两个sql，第一个是查询所有披萨，第二个根据所有披萨的id，使用SQL的 <code>IN</code> 关键字查询披萨的所有原材料，最终在渲染模板的时候django使用缓存即可完成。</p>
<h4 id="子查询导致缓存失效"><a href="#子查询导致缓存失效" class="headerlink" title="子查询导致缓存失效"></a>子查询导致缓存失效</h4><p>在上一个例子的结果中删选出辣披萨 <code>spicy=True</code> , 会导致什么结果？</p>
<p>编写模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Pizza<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Topping<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% for pizza in all_pizza %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; pizza.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            &#123;% for topping in pizza.toppings.all %&#125;</span><br><span class="line">            &#123;&#123; topping &#125;&#125;,</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>辣pizza:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;% for p in spicy_pizza %&#125;</span><br><span class="line">    名字：&#123;&#123; p.name &#125;&#125;; 配料 &#123;% for t in p.toppings.all %&#125; &#123;&#123; t &#125;&#125;, &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应的view函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_pizza</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_pizza = Pizza.objects.all().prefetch_related(<span class="string">'toppings'</span>)</span><br><span class="line">    spicy_pizza = all_pizza.filter(spicy=<span class="literal">True</span>) <span class="comment">#过滤辣披萨</span></span><br><span class="line">    <span class="keyword">return</span> render(request, template_name=<span class="string">'get_all_pizza.html'</span>, context=locals())</span><br></pre></td></tr></table></figure>

<p>对应的SQL：</p>
<p><img src="https://s1.ax1x.com/2020/05/12/YNgotg.png" alt="YNgotg.png"></p>
<p>理论上应该只有两次查询，但是实际上多两次，仔细分析发现第三条sql是在第一条基础上加了删选 <code>spicy=1</code> , 第四条SQL也就只针对第三条的结果进行删选。</p>
<p>这点需要注意，第三条是完全是一个新的查询，所以第一条的缓存用不上。</p>
<h4 id="多级关联查询"><a href="#多级关联查询" class="headerlink" title="多级关联查询"></a>多级关联查询</h4><p>这次我们列出所有饭店的所有披萨及原料，新建模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Restaurant<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Pizza<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Toppings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% for r in all_res %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"&#123;&#123; r.pizzas.count &#125;&#125;"</span>&gt;</span>&#123;&#123; r.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &#123;% for p in r.pizzas.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; p.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            &#123;% for t in p.toppings.all %&#125;</span><br><span class="line">            &#123;&#123; t.name &#125;&#125;-&#123;&#123; t.city &#125;&#125;,</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写view函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_res</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_res = Restaurant.objects.prefetch_related(<span class="string">'pizzas__toppings'</span>).all()</span><br><span class="line">    <span class="keyword">return</span> render(request, template_name=<span class="string">'get_all_res.html'</span>, context=locals())</span><br></pre></td></tr></table></figure>

<p>多级查询跟select_related一样, 请求的SQL如下：</p>
<p><img src="https://s1.ax1x.com/2020/05/12/YNWl0P.png" alt="YNWl0P.png"></p>
<p>关联几张表就查询几次。</p>
<h4 id="多对多、多对一混合查询"><a href="#多对多、多对一混合查询" class="headerlink" title="多对多、多对一混合查询"></a>多对多、多对一混合查询</h4><p>查询所有饭店的拿手菜及原料，先定好模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Restaurant<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Best Pizza<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Toppings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% for r in all_res %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; r.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; r.best_pizza.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            &#123;% for t in r.best_pizza.toppings.all %&#125;</span><br><span class="line">            &#123;&#123; t &#125;&#125;,</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里有两种查询方法，先看第一种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_res_best</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_res = Restaurant.objects.prefetch_related(<span class="string">'best_pizza__toppings'</span>).all()</span><br><span class="line">    <span class="keyword">return</span> render(request, template_name=<span class="string">'res_best.html'</span>, context=locals())</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/YNhMIf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/12/YNhMIf.png" alt="YNhMIf.png"></a></p>
<p>总共三个查询，很容易理解。注意饭店和拿手菜是多对一关系，这里可以将前连个sql合并为一个，所以第二种查询写法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_all_res_best(request):</span><br><span class="line">    all_res &#x3D; Restaurant.objects.select_related(&#39;best_pizza&#39;).prefetch_related(&#39;best_pizza__toppings&#39;).all()</span><br><span class="line">    return render(request, template_name&#x3D;&#39;res_best.html&#39;, context&#x3D;locals())</span><br></pre></td></tr></table></figure>

<p><a href="https://imgchr.com/i/YNhvY8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/12/YNhvY8.png" alt="YNhvY8.png"></a></p>
<p>可以看到sql总数减少到2个。</p>
<h4 id="使用Prefetch对象进一步控制prefetch操作"><a href="#使用Prefetch对象进一步控制prefetch操作" class="headerlink" title="使用Prefetch对象进一步控制prefetch操作"></a>使用Prefetch对象进一步控制prefetch操作</h4><p>现在要获取所有饭店的所有披萨，同时获取披萨原料及产地。</p>
<p>模板:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Restaurant<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Pizza<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Toppings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% for r in all_res %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"&#123;&#123; r.pizzas.count &#125;&#125;"</span>&gt;</span>&#123;&#123; r.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &#123;% for p in r.pizzas.all %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; p.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            &#123;% for t in p.toppings.all %&#125;</span><br><span class="line">            &#123;&#123; t.name &#125;&#125;-&#123;&#123; t.city &#125;&#125;,</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不使用Prefetch对象，view函数写法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_res</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_res = Restaurant.objects.prefetch_related(<span class="string">'pizzas__toppings__city'</span>).all()</span><br><span class="line">    <span class="keyword">return</span> render(request, template_name=<span class="string">'get_all_res.html'</span>, context=locals())</span><br></pre></td></tr></table></figure>

<p>由于原料和产地是多对一关系，使用prefetch_related必然会多一次sql查询。</p>
<p><img src="https://s1.ax1x.com/2020/05/12/YNTWGV.png" alt="YNTWGV.png"></p>
<p>标红的连个sql可以合并为一个。</p>
<p>使用Prefetch，view函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_res</span><span class="params">(request)</span>:</span></span><br><span class="line">    all_res = Restaurant.objects.prefetch_related(Prefetch(<span class="string">'pizzas__toppings'</span>, queryset=Topping.objects.select_related(<span class="string">'city'</span>)))</span><br><span class="line">    <span class="keyword">return</span> render(request, template_name=<span class="string">'get_all_res.html'</span>, context=locals())</span><br></pre></td></tr></table></figure>

<p>对应的SQL如下，对Topping调用select_related，减少查询次数。</p>
<p><a href="https://imgchr.com/i/YN7mLQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/12/YN7mLQ.png" alt="YN7mLQ.png"></a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Djnago官方文档 </li>
</ol>
]]></content>
      <categories>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>vmstat用法</title>
    <url>/2020/05/06/vmstat/</url>
    <content><![CDATA[<h2 id="什么是-vmstat"><a href="#什么是-vmstat" class="headerlink" title="什么是 vmstat"></a>什么是 vmstat</h2><p>vmstat 是一个标准的工具，它会报告 Linux 系统的虚拟内存统计。vmstat 会报告有关进程、内存、分页、块 IO、陷阱（中断）和 cpu 活动的信息。它可以帮助 Linux 管理员在解决问题时识别系统瓶颈。</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
